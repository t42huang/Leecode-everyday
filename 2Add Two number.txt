/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
//  1 现将l1 l2 头节点相加取余，得到的值赋给新link的头
// 2 遍历2linklist 不足加0 至结尾
// 3 每次相加后 创建新的节点
// 4 返回头节点
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(0);
        ListNode cur = head;
        int carry = 0;
        while(l1 != null || l2 != null){
            int x = l1 == null ? 0 : l1.val;
            int y = l2 == null ? 0 : l2.val;
            int sum = x + y + carry;

            //creat new node
            carry = sum / 10;
            cur.next = new ListNode(sum%10);

            //prepare for next circle
            cur = cur.next;  
            if(l1 != null){
                l1 = l1.next;
            }
            if(l2 != null)
                l2 = l2.next;
        }
        if(carry != 0)
            cur.next = new ListNode(carry);
        return head.next;
    }
}